(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{409:function(t,e,l){"use strict";l.r(e);var n={name:"Dom",components:{},data:function(){return{}},mounted:function(){}},r=l(22),component=Object(r.a)(n,(function(){this._self._c;return this._m(0)}),[function(){var t=this,e=t._self._c;return e("div",{staticClass:"content basic-dark2-line-1px pb--50 mb--35"},[e("div",{staticClass:"inner"},[e("h5",{staticClass:"heading heading-h5 line-height-1-95 wow move-up"},[t._v("DOM에 대하여 알아보도록 합시다.”")]),t._v(" "),e("div",{staticClass:"desc mt--45 mb--50"},[e("p",[t._v("DOM 개념.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("DOM (Document Object Model) 은 HTML 또는 XML document와 상호작용하고 표현하는 API(JS와 같은 HTML 요소의 연결 지점)입니다. DOM은 browser에서 로드되며, 노드 트리(각 노드는 document의 부분을 나타냅니다)로 표현하는 document 모델입니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("아래는 브라우저의 렌더링 엔진의 기본적인 동작 과정입니다.")]),t._v(" "),e("img",{staticClass:"w-100",attrs:{src:"https://d2.naver.com/content/images/2015/06/helloworld-59361-2.png",alt:"browser rendering image"}}),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v('브라우저의 렌더링 엔진은 HTML 문서를 파싱하고 "콘텐츠 트리" 내부에서 태그를 DOM 노드로 변환합니다. 그 다음 외부 CSS 파일과 함께 포함된 스타일 요소도 파싱합니다. 스타일 정보와 HTML 표시 규칙은 "렌더 트리"라고 부르는 또 다른 트리를 생성합니다.')]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("아래는 웹킷과 모질라 게코에서의 렌더링 엔진의 동작 과정입니다. 두 부분은 구조가 약간 다를지라도, 위의 렌더링 엔진의 동작 과정이 거의 동일합니다.")]),t._v(" "),e("img",{staticClass:"w-100",attrs:{src:"https://d2.naver.com/content/images/2015/06/helloworld-59361-3.png",alt:"webkit browser rendering tree image"}}),t._v(" "),e("img",{staticClass:"w-100",attrs:{src:"https://d2.naver.com/content/images/2015/06/helloworld-59361-4.png",alt:"geako browser rendering tree image"}}),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("위의 내용을 통해 DOM, CSS, JS의 관계에 대하여 간략히 정리하면 ")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("DOM(실제 HTML 요소), CSS(브라우저가 이 rules를 통해 rendering 방식을 결정), JS(브라우저가 이해하는 프로그래밍 언어, DOM과 CSS를 조작하며 그외 동작도 수행)")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v('고객이 사이트(url)에 접근한 경우, 브라우저는 서버에 "컨텐츠"를 요청합니다. 서버는 일반적으로 DOM, CSS 및 JavaScript 태그를 포함하는 HTML 페이지를 다시 전송해줍니다.')]),t._v(" "),e("p",{staticClass:"inner-blog-text-50"},[t._v("1. 브라우저는 컨텐츠 트리를 생성하기 위해 HTML을 읽는 것으로 시작합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-50"},[t._v("2. 이후 CSS를 CSS 파서를 통해 DOM과 함께 렌더링 트리를 만듭니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-50"},[t._v("3. 각 HTML 요소에 표시할 정확한 물리적 창 좌표가 할당되는 레이아웃 프로세스를 거칩니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-50"},[t._v('4. 마지막으로 모든 것이 "채색"되고 양식화된 HTML 페이지가 표시됩니다.')]),t._v(" "),e("p",{staticClass:"inner-blog-text-50"},[t._v("5. JavaScript의 script 태그에서 발생하는 대로 브라우저에서 별도로 구문 분석됩니다. JavaScript는 dom의 기존 구성 요소를 추가/삭제/수정하고 CSS가 적용되는 방식을 변경할 수 있습니다. 또한 새로운 네트워크 호출 등 그외의 기능들을 담당해 줍니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-50"},[t._v("이때 4 -> 5 과정에 시간이 오래걸리는 경우 고객에게 화면은 보이지만, 기능이 상호작용 되지 않는 경우가 발생됩니다.")])]),t._v(" "),e("div",{staticClass:"desc mt--45 mb--50"},[e("p",[t._v("DOM 기초 사용 법")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("DOM data type")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[e("table",{staticClass:"table"},[e("thead",[e("tr",[e("th",{staticClass:"pricing-header"},[e("span",{staticClass:"heading-h4"},[t._v("Data type")])]),t._v(" "),e("th",{staticClass:"pricing-header"},[e("span",{staticClass:"heading-h4"},[t._v("설명")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("Document")])])])]),t._v(" "),e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("root DOM Object 입니다.")])])])])]),t._v(" "),e("tr",[e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("Node")])])])]),t._v(" "),e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("Document 내에 있는 모든 개체는 일종의 노드입니다. HTML 문서에서 객체는 attribute 노드일 수 있지만 텍스트 노드 또는 속성 노드일 수도 있습니다.")])])])])]),t._v(" "),e("tr",[e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("Element")])])])]),t._v(" "),e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("HTML 요소는 Element 노드이며, Attribute 노드를 가질 수 있는 유일한 노드입니다. document.createElement()와 같은 곳에서 신규 Element를 생성시키며 return 합니다.")])])])])]),t._v(" "),e("tr",[e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("NodeList")])])])]),t._v(" "),e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("NodeList는 Element들의 배열 입니다. document.querySelectorAll()와 같은 곳에서 가져와서 사용됩니다.")])])])])]),t._v(" "),e("tr",[e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("Attr")])])])]),t._v(" "),e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("Attr는 Element의 특별한 interface 입니다. createAttribute() 등을 통해 사용됩니다.")])])])])]),t._v(" "),e("tr",[e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("NamedNodeMap")])])])]),t._v(" "),e("td",{staticClass:"price-list"},[e("ul",[e("li",[e("span",[t._v("배열과 비슷하지만 이름이나 인덱스로 항목에 액세스합니다. 각 액세스를 위한 이러한 목적을 위한 item() 메서드가 있으며 namedNodeMap에서 항목을 추가하고 제거할 수도 있습니다.")])])])])])])])]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("DOM core interface")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("document.querySelector(selector)")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("document 안에서 element의 ID"),e("code",[t._v('document.querySelector("#id");')]),t._v("나, CSS selector"),e("code",[t._v("document.querySelector(\"div.user-panel:not(.main) input[name='login']\");")]),t._v("와 동일한 것들 중 document에서 해당 값이 있는 첫 번째 요소가 반환됩니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("document.querySelectorAll(name)")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("document 안에서 selector 형식과 동일한 "),e("code",[t._v('document.querySelectorAll("p");')]),t._v(" element의 리스트를 반환합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("document.createElement(name)")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("document 안에서 element를 생성하고, element를 반환합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("parentNode.appendChild(node)")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("parentNode에 child로 추가합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("element.innerHTML")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("Element안의 HTML 또는 XML 태그를 가져오거나 설정합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("element.style...")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("Element안의 style 관련 값을 가져오거나 설정합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("element.setAttribute()")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("Element안의 Attribute 값을 추가하거나 업데이트합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("element.getAttribute()")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("Element안의 Attribute 값을 가져옵니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("element.addEventListener()")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("Element안의 이벤트를 추가합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("window.content")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("window.onload")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("window.scrollTo()")])]),t._v(" "),e("div",{staticClass:"desc mt--45 mb--50"},[e("p",[t._v("가상 DOM 이란")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("DOM 트리가 수정될 때마다 렌더 트리가 계속해서 실시간으로 갱신되어, 노드의 수가 많아질수록 속도가 느려집니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[e("code",[t._v("document.getElementById('some-id').innerValue = 'updated value';")]),t._v("이와 같은 방식으로 DOM을 업데이트 할 경우")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("'some-id' ID를 가진 노드를 찾은 뒤 위에 설명한 렌더링의 1~4 단계를 다시 반복해야 합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("만약 화면에서 N번의 수정이 발생되면 N번의 렌더 트리가 생성되어야 합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("이러한 메모리 낭비를 줄이기 위해 가상 DOM이라는 방식이 생겼습니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("DOM 변경 시 가상 DOM과 이전 DOM을 비교하여 차이가 있는 DOM만 업데이트하는 방식 입니다.")]),t._v(" "),e("img",{staticClass:"w-100",attrs:{src:"https://soshace.com/wp-content/uploads/2019/12/virtual-dom-vs-dom-1.jpg",alt:"virtual-dom-vs-dom"}})])]),t._v(" "),e("div",{staticClass:"mt--45 mb--50"},[e("p",[t._v("참고자료")]),t._v(" "),e("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Glossary/DOM"}},[t._v("https://developer.mozilla.org/ko/docs/Glossary/DOM")]),e("br"),t._v(" "),e("a",{attrs:{href:"https://d2.naver.com/helloworld/59361"}},[t._v("https://d2.naver.com/helloworld/59361")]),e("br"),t._v(" "),e("a",{attrs:{href:"https://stackoverflow.com/questions/38834375/relationship-between-html-and-javascript-the-basics-of-frontend-development"}},[t._v("https://stackoverflow.com/questions/38834375/relationship-between-html-and-javascript-the-basics-of-frontend-development")]),e("br"),t._v(" "),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"}},[t._v("https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction")]),e("br"),t._v(" "),e("a",{attrs:{href:"https://www.geeksforgeeks.org/reactjs-virtual-dom/"}},[t._v("https://www.geeksforgeeks.org/reactjs-virtual-dom/")]),e("br"),t._v(" "),e("a",{attrs:{href:"https://doqtqu.tistory.com/316"}},[t._v("https://doqtqu.tistory.com/316")]),e("br")])])}],!1,null,null,null);e.default=component.exports}}]);