(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{420:function(t,e,n){"use strict";n.r(e);var r={name:"Vue2Router",components:{},data:function(){return{}},mounted:function(){},methods:{}},o=n(22),component=Object(o.a)(r,(function(){this._self._c;return this._m(0)}),[function(){var t=this,e=t._self._c;return e("div",{staticClass:"content basic-dark2-line-1px pb--50 mb--35"},[e("div",{staticClass:"inner"},[e("h5",{staticClass:"heading heading-h5 line-height-1-95 wow move-up"},[t._v("Vue router 기초 개념에 대하여 알아보도록 합시다.”")]),t._v(" "),e("div",{staticClass:"desc mt--45 mb--50"},[e("p",[t._v("Vue에서 라우팅은 vue-router를 사용합니다. 페이지 이동할 때 url 변경되면, 변경된 요소의 영역에 컴포넌트를 갱신합니다")]),t._v(" "),e("p",[t._v("갱신한 경우 DOM을 새로 갱신하는게 아닌 변경되는 요소영역만 갱신합니다.(header, footer와 같은 부분들은 갱신하지 않음)")])]),t._v(" "),e("div",{staticClass:"desc mt--45 mb--50"},[e("p",[t._v("router 기초")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("router-link")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("a href를 사용하는 대신 router-link를 통해 링크 이동을 합니다. 이를 사용하면, 페이지를 리로딩 하지 않고, 변경 요소만 갱신합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("router-view")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("현 url에 맞는 페이지를 display합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("vue에서 히스토리를 지원해주려면, 기본적으론 라우터에 히스토리 모드로 넣어주면 됩니다.\n            "),e("pre",[t._v('<div id="app">\n  <h1>Hello App!</h1>\n  <p>\n    \x3c!-- use the router-link component for navigation. --\x3e\n    \x3c!-- specify the link by passing the `to` prop. --\x3e\n    \x3c!-- `<router-link>` will render an `<a>` tag with the correct `href` attribute --\x3e\n    <router-link to="/">Go to Home</router-link>\n    <router-link to="/about">Go to About</router-link>\n  </p>\n  \x3c!-- route outlet --\x3e\n  \x3c!-- component matched by the route will render here --\x3e\n  <router-view></router-view>\n</div>\n\n<template>')])]),e("p",{staticClass:"inner-blog-text-10"},[t._v("js에서의 vue-router")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("router 등록, lifecycle에서 router 값 관리, router 현 값 get/set")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[e("pre",[t._v("const Home = { template: '"),e("div",[t._v("Home")]),t._v("' }\nconst About = { template: '"),e("div",[t._v("About")]),t._v("' }\n// 컴포넌트 등록.\nconst routes = [\n  { path: '/', component: Home },\n  { path: '/about', component: About },\n]\n// VueRouter에서 컴포넌트 등록값 선언 및 설정.\nconst router = VueRouter.createRouter({\n  history: VueRouter.createWebHashHistory(),\n  routes, // short for `routes: routes`\n})\nconst app = Vue.createApp({})\n// Vue에 VueRouter값 등록.\napp.use(router)\napp.mount('#app')\n            ")])]),t._v(" "),e("p",{staticClass:"inner-blog-text-10"},[t._v("네비게이션 가드")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("네비게이션 가드는 특정 페이지 접근 시 페이지의 접근을 막는 기능 입니다. 주로 유저의 권한을 통해 페이지 이동의 허가/불가를 제어합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("전역 가드 : app 전역에서 동작.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("라우터 가드 : 특정 url 전역에서 동작.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("컴포넌트 가드 : 라우터 컴포넌트 안에서 동작.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[e("pre",[t._v("router/index.js\nconst router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n            ")])]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("to: 이동할 대상 Route 입니다. ")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("from: 이전 페이지 Route 입니다. ")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("next(): ()에 빈 매개면 네비게이션이 승락됩니다. false면 이전 페이지, 내부에 router 등록된 path name을 넣어주면 넣어준 곳으로 네비게이션을 시작합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("to: 이전 페이지 Route 입니다. ")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("전역 가드에서는 router.beforeEach와 router.beforeResolve를 사용하는데,  beforeResolve는  모든 in-component 가드와 비동기 라우터 컴포넌트가 종료 된 후, 네비게이션이 승인되기 바로 전에 호출됩니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("그래서 보통은 router.beforeEach에 유저를 API통신을 통해 권한의 적절성을 확인하고, beforeResolve에선 리다이렉트와 같은 것을 확인합니다.")]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("vue에서 히스토리를 지원해주려면, 기본적으론 라우터에 히스토리 모드로 넣어주면 됩니다.\n            "),e("pre",[t._v('router/index.js\nconst router = new VueRouter({\n\troutes,\n\tmode: "history",\n            ')])]),t._v(" "),e("p",{staticClass:"inner-blog-text-30"},[t._v("상용 환경인 웹 서버에서는 vue 소스 설정만이 아닌 웹 서버에 추가적으로 수정이 필요합니다.\n            "),e("pre",[t._v("Apache\n<IfModule mod_negotiation.c>\n  Options -MultiViews\n</IfModule>\n\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\nnginx\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n<template>")])])])]),t._v(" "),e("div",{staticClass:"mt--45 mb--50"},[e("p",[t._v("참고자료")]),t._v(" "),e("a",{attrs:{href:"https://kr.vuejs.org/v2/guide/"}},[t._v("https://kr.vuejs.org/v2/guide/")]),t._v(" "),e("a",{attrs:{href:"https://router.vuejs.org/guide/"}},[t._v("https://router.vuejs.org/guide/")])])])}],!1,null,null,null);e.default=component.exports}}]);