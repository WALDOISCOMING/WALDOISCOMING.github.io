(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{418:function(n,t,e){"use strict";e.r(t);var o={name:"Vue2Component",components:{},data:function(){return{}},mounted:function(){},methods:{}},l=e(22),component=Object(l.a)(o,(function(){var n=this,t=n._self._c;return t("div",{staticClass:"content basic-dark2-line-1px pb--50 mb--35"},[t("div",{staticClass:"inner"},[t("h5",{staticClass:"heading heading-h5 line-height-1-95 wow move-up"},[n._v("Vue Component 기초 개념에 대하여 알아보도록 합시다.”")]),n._v(" "),n._m(0),n._v(" "),n._m(1),n._v(" "),n._m(2),n._v(" "),n._m(3),n._v(" "),t("div",{staticClass:"desc mt--45 mb--50"},[t("p",[n._v("emit")]),n._v(" "),t("p",{staticClass:"inner-blog-text-10"},[n._v("emit은 custom 이벤트로, (HTML의 대소문자 구분을 위해) DOM 템플릿의 v-on 이벤트리스너는 항상 자동으로 소문자 변환되기 때문에 이벤트 이름에는 kebab-case를 사용하는것이 권장됩니다.")]),n._v(" "),t("p",{staticClass:"inner-blog-text-10"},[n._v("parent-child에서만이 아닌 silbling 관계일때에도 emit을 사용하여 데이터 통신을 합니다.(parent가 담당하여 전달함)")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("Child\n            "),t("pre",[n._v('Child\n<template>\n  <button v-on:click="incrementCounter">'+n._s(n.counter)+"</button>\n</template>\n<script>\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    incrementCounter: function () {\n      this.counter += 1\n      this.$emit('increment') // parent에 increment에 보내준다.\n    }\n  },\n<\/script>")])]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("Child\n            "),t("pre",[n._v('Child\n<template>\n  <button v-on:click="incrementCounter">'+n._s(n.counter)+"</button>\n</template>\n<script>\n  data() {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    incrementCounter() {\n      this.counter += 1\n      this.$emit('increment') // parent에 increment에 보내준다.\n      this.$emit('increment-value',counter) // parent에 increment-value에 보내며 변수값을 전달해준다.\n    }\n  },\n>/script>")])]),n._v(" "),n._m(4)]),n._v(" "),n._m(5),n._v(" "),n._m(6),n._v(" "),n._m(7)]),n._v(" "),n._m(8)])}),[function(){var n=this._self._c;return n("div",{staticClass:"desc mt--45 mb--50"},[n("p",[this._v("Vue에서는 화면 또는 기능을 적절하게 분리하여 Component화 하고 개발을 하고 이것을 연결하여 프로그램이 작동하도록 구현하는 방법을 사용합니다.")])])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"desc mt--45 mb--50"},[t("p",[n._v("Component 기초")]),n._v(" "),t("p",[n._v("진행하기 앞서, 실제 개발을 하며 진행하는 것이 적절해 저번 장에 진행했던, 프로젝트를 open합니다.")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("HelloWorld.vue 의 template 내용을 아래와 같이 div 하나만 제외하고 제거합니다.\n            "),t("pre",[n._v('<template>\n  <div class="hello">\n  </div>\n</template>')])]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("HelloWorld.vue 위치에 GlobalComponent.vue를 생성해 주세요.\n            "),t("pre",[n._v("<template>\n  <div>\n    Global Component 입니다.\n  </div>\n</template>\n<script>\nexport default {\n  name: 'global-component',\n}\n<\/script>")])]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("HelloWorld.vue 위치에 LocalComponent.vue를 생성해 주세요.\n            "),t("pre",[n._v("<template>\n  <div>\n    Local Component 입니다.\n  </div>\n</template>\nexport default {\n  name: 'local-component',\n}\n<\/script>")])]),n._v(" "),t("p",{staticClass:"inner-blog-text-10"}),t("li",[n._v("전역 등록")]),t("p"),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("전역 등록은 등록 이후 전체에서 사용 가능한 Component가 됩니다.")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("사용 시 편리해지지만, 전역 등록을 할때마다 리소스가 커집니다. 전역적으로 필요한 Component에서 사용 필요합니다.")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("전역 컴포넌트를 등록하려면, Vue.component(tagName, options)를 사용합니다. tagName은 추후 사용될 이름, options에는 사용할 컴포넌트를 넣어주세요.\n            "),t("pre",[n._v("main.js 에서 전역 컴포넌트를 등록합니다\n...\nimport globalComponent from \"@/components/GlobalComponent\"\nVue.component('global-component', globalComponent)\n...\n            ")])]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("HelloWorld.vue에서 컴포넌트를 호출합니다.\n            "),t("pre",[n._v("<template>\n  <global-component></global-component>\n</template>")])]),n._v(" "),t("img",{staticClass:"w-100",attrs:{src:"/img/web-development/vue-global-component.png",alt:"vue global component"}}),n._v(" "),t("p",{staticClass:"inner-blog-text-10"}),t("li",[n._v("지역 등록")]),t("p"),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("지역 등록을 하면, 리소스에 부담은 적게 가지만 선언 해준곳에서만 사용 가능합니다. 적게 사용되거나, 특정한 부분에서 쓰일때 사용됩니다.")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("HelloWorld.vue\n            "),t("pre",[n._v("<template>\n  <global-component></global-component>\n  <local-component></local-component>\n</template>\n<script>\nimport localComponent from '@/components/LocalComponent'\nexport default {\n  name: 'HelloWorld',\n\tcomponents: {\n    localComponent\n  },\n}\n<\/script>")])]),n._v(" "),t("img",{staticClass:"w-100",attrs:{src:"/img/web-development/vue-local-component.png",alt:"vue local component"}}),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("컴포넌트에서 부모-자식 관계는 가장 일반적으로 사용됩니다")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("부모-자식 관례는 parent가 child에서 보낼때는 props, child에서 parent로 보낼때는 emit을 사용하여 데이터를 전달합니다.")]),n._v(" "),t("img",{staticClass:"w-100",attrs:{src:"/img/web-development/vue-props-emit.png",alt:"vue props emit"}})])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"desc mt--45 mb--50"},[t("p",[n._v("props")]),n._v(" "),t("p",{staticClass:"inner-blog-text-10"},[n._v("HTML 속성은 대소 문자를 구분하지 않으므로 문자열이 아닌 템플릿을 사용할 때 camelCased prop 이름에 해당하는 kebab-case(하이픈 구분)를 사용해야 합니다.")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("prop에 특정 타입이 지정된 prop의 리스트를 구현할 수 있습니다.\n            "),t("pre",[n._v("props: {\n  title: String,\n  likes: Number,\n  isPublished: Boolean,\n  commentIds: Array,\n  author: Object,\n  callback: Function,\n  contactsPromise: Promise // or any other constructor\n}")])]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("Parent\n            "),t("pre",[n._v('<! -- 정적인 string 형식의 prop --\x3e\n<blog-post title="My journey with Vue"></blog-post>\n\x3c!-- 변수에 담긴 값을 동적으로 할당 --\x3e\n<blog-post v-bind:title="post.title"></blog-post>\n\n\x3c!-- `42`는 정적인 값이지만, Vue에서 해당 값이 숫자라는 것을 알 수 있도록 하기 위해 --\x3e\n\x3c!-- v-bind를 이용해 문자열이 아닌 JavaScript 표현식이라는 것을 알려줍니다.      --\x3e\n<blog-post v-bind:likes="42"></blog-post>\n\n\x3c!-- 변수의 값을 동적으로 할당할 수도 있습니다. --\x3e\n<blog-post v-bind:likes="post.likes"></blog-post>\n\n\x3c!-- 값이 없는 prop은 `true` 를 전달합니다.. --\x3e\n<blog-post is-published></blog-post>\n\n\x3c!-- `false`는 정적인 값이지만, Vue에서 해당 값이 논리 자료형이라는 것을 알 수 있도록 하기 위해 --\x3e\n\x3c!-- v-bind를 이용해 문자열이 아닌 JavaScript 표현식이라는 것을 알려줍니다.                --\x3e\n<blog-post v-bind:is-published="false"></blog-post>\n\n\x3c!-- 변수의 값을 동적으로 할당할 수도 있습니다. --\x3e\n<blog-post v-bind:is-published="post.isPublished"></blog-post>\n\n\x3c!-- 해당 배열은 정적인 값이지만, Vue에서 해당 값이 배열이라는 것을 알 수 있도록 하기 위해 --\x3e\n\x3c!-- v-bind를 이용해 문자열이 아닌 JavaScript 표현식이라는 것을 알려줍니다.          --\x3e\n<blog-post v-bind:comment-ids="[234, 266, 273]"></blog-post>\n\n\x3c!-- 변수의 값을 동적으로 할당할 수도 있습니다. --\x3e\n<blog-post v-bind:comment-ids="post.commentIds"></blog-post>\n\n\x3c!-- 해당 오브젝트는 정적인 값이지만, Vue에서 해당 값이 배열이라는 것을 알 수 있도록 하기 위해 --\x3e\n\x3c!-- v-bind를 이용해 문자열이 아닌 JavaScript 표현식이라는 것을 알려줍니다.             --\x3e\n<blog-post\n  v-bind:author="{\n    name: \'Veronica\',\n    company: \'Veridian Dynamics\'\n  }"\n></blog-post>\n\n\x3c!-- 변수의 값을 동적으로 할당할 수도 있습니다. --\x3e\n<blog-post v-bind:author="post.author"></blog-post>\n\n\x3c!-- 오브젝트의 모든 속성을 전달하길 원하는 경우, v-bind:prop-name 대신 v-bind 만 작성함으로써 모든 속성을 prop으로 전달할 수 있습니다. --\x3e\npost: {\n  id: 1,\n  title: \'My Journey with Vue\'\n}\n<blog-post v-bind="post"></blog-post>\n\n\x3c!-- 위 오브젝트는 아래와 같이 전달됩니다. --\x3e\n<blog-post\n  v-bind:id="post.id"\n  v-bind:title="post.title"\n></blog-post>')])])])},function(){var n=this,t=n._self._c;return t("p",{staticClass:"inner-blog-text-30"},[n._v("Child\n            "),t("pre",[n._v("Vue.component('my-component', {\n  props: {\n    // 기본 타입 체크 (`Null`이나 `undefinded`는 모든 타입을 허용합니다.)\n    propA: Number,\n    // 여러 타입 허용\n    propB: [String, Number],\n    // 필수 문자열\n    propC: {\n      type: String,\n      required: true\n    },\n    // 기본값이 있는 숫자\n    propD: {\n      type: Number,\n      default: 100\n    },\n    // 기본값이 있는 오브젝트\n    propE: {\n      type: Object,\n      // 오브젝트나 배열은 꼭 기본값을 반환하는\n      // 팩토리 함수의 형태로 사용되어야 합니다.\n      default: function () {\n        return { message: 'hello' }\n      }\n    },\n    // 커스텀 유효성 검사 함수\n    propF: {\n      validator: function (value) {\n        // 값이 항상 아래 세 개의 문자열 중 하나여야 합니다.\n        return ['success', 'warning', 'danger'].indexOf(value) !== -1\n      }\n    }\n  }\n})")])])},function(){var n=this,t=n._self._c;return t("p",{staticClass:"inner-blog-text-30"},[n._v("Parent\n            "),t("pre",[n._v('Parent\n<template>\n  ...\n  \x3c!-- emit 이벤트 명(child에서 불러줄 때) 케밥 형식으로 명명되며 :on에 호출된다. parent 받아주는 func은 응답 부분에 있으며 js이므로 camel로 명명된다.   --\x3e\n  <child-component v-on:increment="incrementTotal" v-on:increment-value="incrementTotalValue"></child-component>\n  ...\n</template>\n<script>\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal() {\n      this.total += 1\n    }\n    incrementTotalValue(value) {\n      alert(value)\n    }\n  }\n>/script>')])])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"desc mt--45 mb--50"},[t("p",[n._v("sync")]),n._v(" "),t("p",{staticClass:"inner-blog-text-10"},[n._v("“양방향 바인딩”이 필요한 경우 사용됩니다. 성능은 좋지 못하지만, 특수한 경우 필요합니다.")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[t("pre",[n._v('예를 들어 title이라는 prop을 갖는 요소가 있다고 할 때, 아래와 같이 새로운 값을 할당하도록 요청할 수 있습니다.\nthis.$emit(\'update:title\', newTitle)\n부모 요소는 이벤트를 감지하여 (원한다면) 로컬 data 속성을 업데이트 할 수 있습니다.\n<text-document\n  v-bind:title="doc.title"\n  v-on:update:title="doc.title = $event"\n></text-document>\n\n이러한 것들을 간단히 sync를 쓰면 아래와 같습니다.\n<text-document v-bind:title.sync="doc.title"></text-document>')])])])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"desc mt--45 mb--50"},[t("p",[n._v("slot")]),n._v(" "),t("p",{staticClass:"inner-blog-text-10"},[n._v("컴포넌트를 재사용 하는 기법입니다. 컴포넌트를 확장하거나, 재정의합니다.")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[t("pre",[n._v('slot 사용\n아래와 같이 submit으로 선언된, component를 사용한다고 합시다.\n<button type="submit">\n  <slot>Submit</slot>\n</button>\n위 내용을 parent에서 아래와 같이 사용되면.\n<submit-button></submit-button>\nsubmit으로 나올 것 입니다.\n<button type="submit">\n  Submit\n</button>\n하지만 Save라는 값을 전달해 주면\n<submit-button>\n  Save\n</submit-button>\nSave으로 나올 것 입니다.\n<button type="submit">\n  Save\n</button>')])]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[t("pre",[n._v("slot을 여러개 쓰는 경우, name을 통해 사용해야 합니다.\nname이 지정되지 않은 <slot>에는 암묵적으로 “default” 값이 사용됩니다.\n<base-layout>\n  <template v-slot:header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <template v-slot:default>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </template>\n\n  <template v-slot:footer>\n    <p>Here's some contact info</p>\n  </template>\n</base-layout>\n양쪽 모두 렌더링된 HTML은 아래와 같게 됩니다.\n\n<div class=\"container\">\n  <header>\n    <h1>Here might be a page title</h1>\n  </header>\n  <main>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </main>\n  <footer>\n    <p>Here's some contact info</p>\n  </footer>\n</div>")])]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[t("pre",[n._v('범위가 있는 슬롯 (Scoped-Slots)\n자식 컴포넌트에서만 접근할 수 있는 데이터에서 슬롯에 필요한 내용을 가져와야 할 수 있습니다.\n아래 템플릿의 <current-user> 컴포넌트의 예를 살펴봅시다. 아래에는 user의 lastName을 사용하고 있습니다.\n\n<span>\n  <slot> user.lastName </slot>\n</span>\n본값을 사용자의 성말고 이름으로 바꾸고 싶을 수도 있습니다\n하지만 작동하지 않습니다. 왜냐하면 <current-user> 컴포넌트만 user에 접근할 수 있는데 슬롯에 제공되는 내용들은 부모 컴포넌트에서 렌더링되기 때문입니다.\n부모 컴포넌트의 슬롯에서 user를 쓸려면 user를 <slot> 요소에 속성으로 연결해야 합니다.\n\n<span>\n  <slot v-bind:user="user">\n    user.lastName\n  </slot>\n</span>')])])])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"desc mt--45 mb--50"},[t("p",[n._v("동적 컴포넌트")]),n._v(" "),t("p",{staticClass:"inner-blog-text-10"},[n._v("동적으로 컴포넌트를 포넌트를 트랜지션(전이)하고, is 속성으로 동적으로 바인드 합니다.")]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("아래 3개의 방식으로 component를 동적으로 바인딩 합니다.\n            "),t("pre",[n._v("template-A.vue\n<template>\n  <div>\n  templateA\n  </div>\n</template>\ntemplateB.vue\n<template>\n  <div>\n  templateB\n  </div>\n</template>\ntemplateC.vue\n<template>\n  <div>\n  templateC\n  </div>\n</template>\nparent.vue\n<template>\n <component :is=\"templateA\"></component>\n <component :is=\"templateB\"></component>\n <component :is=\"componentInstance\"></component>\n</template>\n<script>\nimport templateA from './templateA'\n  export default {\n    components: {\n      templateA: templateA,\n      templateB: () => import('./templateB'),\n    },\n    data () {\n      return {\n        componentInstance: '',\n      }\n    },\n    mounted () {\n      let componentName = './templateC';\n      this.componentInstance = () => import(componentName)\n    }\n  ...\n<\/script>")])]),n._v(" "),t("p",{staticClass:"inner-blog-text-30"},[n._v("트랜지션된 컴포넌트를 메모리에 유지하여 상태를 보존하거나 다시 렌더링하지 않도록하려면 동적 컴포넌트를 keep-alive로 래핑하면 됩니다.\n            "),t("pre",[n._v('<keep-alive>\n  <component :is="currentView">\n    \x3c!-- 비활성화 된 컴포넌트는 캐시 됩니다! --\x3e\n  </component>\n</keep-alive>')])])])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"mt--45 mb--50"},[t("p",[n._v("참고자료")]),n._v(" "),t("a",{attrs:{href:"https://kr.vuejs.org/v2/guide/"}},[n._v("https://kr.vuejs.org/v2/guide/")])])}],!1,null,null,null);t.default=component.exports}}]);